#include <sys/un.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#define SV_SOCK_PATH "/tmp/us_xfr"
#define BUF_SIZE 100
#define BACKLOG 5

int main(int argc,char *argv[]){
    struct sockaddr_un addr;
    int sfd;
    ssize_t numRead;
    char buf[BUF_SIZE];

    sfd = socket(AF_UNIX,SOCK_STREAM,0); //crea un socket en local
    if(sfd == -1)
        perror("socket");
    
    memset(&addr,0,sizeof(struct sockaddr_un)); //inicializa la strucutura

    addr.sun_family=AF_UNIX;
    strncpy(addr.sun_path,SV_SOCK_PATH,sizeof(addr.sun_path) -1);

    //buscamos conectarnos al servidor
    if(connect(sfd,(struct sockaddr *)&addr,sizeof(struct sockaddr_un)) == -1)
        perror("connect");
    
    while((numRead = read(STDIN_FILENO,buf,BUF_SIZE))>0){
        if(write(sfd,buf,numRead) != numRead)
            perror("partial/failed write");
    }

    if(numRead == -1)
        perror("read");
    
    exit(EXIT_SUCCESS);
}#include <sys/un.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#define SV_SOCK_PATH "/tmp/us_xfr"
#define BUF_SIZE 100
#define BACKLOG 5

int main(int argc,char *argv[]){
    struct sockaddr_un addr;
    int sfd,cfd;
    ssize_t numRead;
    char buf[BUF_SIZE];
    //retorna descriptor de archivo
    sfd = socket(AF_UNIX,SOCK_STREAM,0);
    if(sfd == -1)perror("socket creation");
//limina cualquier archivo existente con el mismo pathname que el que queremos ligar al socket.
    if(remove(SV_SOCK_PATH)== -1 && errno != ENOENT)
        perror("remove");

    memset(&addr,0,sizeof(struct sockaddr_un));   
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path,SV_SOCK_PATH, sizeof(addr.sun_path)-1);

//busca alguna conexion ligar algun soket
    if(bind(sfd,(struct sockaddr *)&addr,sizeof(struct sockaddr_un)) ==-1)
        perror("bind");
//cuando encuentra la xonexiÃ³n para aceptarla
    if(listen(sfd,BACKLOG) == -1)
        perror("listen");

    for(;;){
        //acepta la conexion,si  se llega al accept, el servidor se bloquea esperando por connect
        cfd = accept(sfd,NULL,NULL); //este socket es el conectado al socket de su pareja , es decir el cliente,
        //el sfd sirve para recibir mas conexiones
        if(cfd == -1)
            perror("accept");

        while((numRead = read(cfd,buf,BUF_SIZE)) >0)
            if(write(STDOUT_FILENO,buf,numRead) != numRead)
                perror("partial/failed write");

        if(numRead == -1)perror("read");
        if(close(cfd) == -1)perror("close");
    }   
}